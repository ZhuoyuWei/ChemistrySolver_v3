
fx = Formula()
fx.OutputName = "equilibrium_constant_k"
fx.InputNames = ["equation", "graph"]
fx.Function = Formula.EquationKWithMolarity
rs.append(fx)

fx = Formula()
fx.OutputName = "equilibrium_constant_k"
fx.InputNames = ["equation", "graph", "volume"]
fx.Function = Formula.EquationK
rs.append(fx)

fx = Formula()
fx.OutputName = "coefficient"
fx.InputNames = ["equation", "graph", "molecule"]
fx.Function = lambda dbList: Formula.GetCoefficient(dbList[0], dbList[2])
rs.append(fx)




fx = Formula()
fx.OutputName = 'standard_enthalpy'
fx.InputNames = ['equation', 'graph']
fx.Function = Formula.StandardEnthalpy
rs.append(fx)

################REMIND###############################






fx = Formula()
fx.OutputName = "atom mass in molecule"
fx.InputNames = ["atom", "molecule", "mole"]
fx.Function = Formula.CalcAtomMass
rs.append(fx)

fx = Formula()
fx.OutputName = "atom number in molecule"
fx.InputNames = ["atom", "molecule", "mole"]
fx.Function = Formula.CalcAtomNumber
rs.append(fx)

fx = Formula()
fx.OutputName = "atom number in molecule"
fx.InputNames = ["atom", "molecule"]
fx.Function = Formula.CalcAtomNumberSimple
rs.append(fx)

fx = Formula()
fx.OutputName = "atom oxidation number"
fx.InputNames = ["atom", "molecule"]
fx.Function = Formula.CalcAtomOxidationNumber
rs.append(fx)

fx = Formula()
fx.OutputName = "energy"
fx.InputNames = ["mass", "shc", "dt"]
fx.Function = lambda dbList: dbList[0] * dbList[1] * dbList[2]
rs.append(fx)

fx = Formula()
fx.OutputName = "mass"
fx.InputNames = ["energy", "shc", "dt"]
fx.Function = lambda dbList: dbList[0] / dbList[1] / dbList[2]
rs.append(fx)

fx = Formula()
fx.OutputName = "shc"
fx.InputNames = ["energy", "mass", "dt"]
fx.Function = lambda dbList: dbList[0] / dbList[1] / dbList[2]
rs.append(fx)

fx = Formula()
fx.OutputName = "dt"
fx.InputNames = ["energy", "mass", "shc"]
fx.Function = lambda dbList: dbList[0] / dbList[1] / dbList[2]
rs.append(fx)

fx = Formula()
fx.OutputName = "massconcentration"
fx.InputNames = ["mass", "volume"]
fx.Function = lambda dbList: dbList[0] / dbList[1]
rs.append(fx)

fx = Formula()
fx.OutputName = "avogadroconstant"
fx.InputNames = ["molecule"]
fx.Function = lambda *dbList: 6.023e23
rs.append(fx)

fx = Formula()
fx.OutputName = "boiling_point_temperature2"
fx.InputNames = ["boiling_point_temperature1", "hvap", "vapor_pressure1", "vapor_pressure2"]
fx.Function = lambda dbList: 1.0 / (1.0 / dbList[0] - 8.314 / dbList[1] * math.log(dbList[3] / dbList[2]))
rs.append(fx)

fx = Formula()
fx.OutputName = "vapor_pressure2"
fx.InputNames = ["boiling_point_temperature1", "hvap", "vapor_pressure1", "boiling_point_temperature2"]
fx.Function = lambda dbList: dbList[2] * math.e ** (-dbList[1] / 8.314 * (1.0 / dbList[3] - 1.0 / dbList[0]))
rs.append(fx)

fx = Formula()
fx.OutputName = "hvap"
fx.InputNames = ["vapor_pressure1", "vapor_pressure2", "boiling_point_temperature1", "boiling_point_temperature2"]
fx.Function = lambda dbList: math.log(dbList[1] / dbList[0]) * (-8.314) / (1 / dbList[3] - 1 / dbList[2])
rs.append(fx)

fx = Formula()
fx.OutputName = "ka"
fx.InputNames = ["molarity_h", "molarity_a", "molarity_ha"]
fx.Function = lambda dbList: dbList[0] * dbList[1] / dbList[2]
rs.append(fx)

fx = Formula()
fx.OutputName = "kb"
fx.InputNames = ["molarity_oh", "molarity_a", "molarity_aoh"]
fx.Function = lambda dbList: dbList[0] * dbList[1] / dbList[2]
rs.append(fx)

fx = Formula()
fx.OutputName = "osmolarity"
fx.InputNames = ["molarity", "molecule"]
fx.Function = lambda dbList: dbList[0] * Utils.Utils.CalcOSCoefficient(dbList[1])
rs.append(fx)

fx = Formula()
fx.OutputName = 'absorptivity'
fx.InputNames = ['molarity', 'depth', 'absorbance']
fx.Function = lambda dbList: dbList[2] / dbList[0] / dbList[1]
rs.append(fx)

fx = Formula()
fx.OutputName = 'transmittance'
fx.InputNames = ['absorbance']
fx.Function = lambda dbList: (10 ** (2 - dbList[0])) / 100
rs.append(fx)

fx = Formula()
fx.OutputName = 'absorbance'
fx.InputNames = ['molarity', 'depth', 'absorptivity']
fx.Function = lambda dbList: dbList[0] * dbList[1] * dbList[2]
rs.append(fx)

fx = Formula()
fx.OutputName = 'depth'
fx.InputNames = ['absorbance', 'molarity', 'absorptivity']
fx.Function = lambda dbList: dbList[0] / dbList[1] / dbList[2]
rs.append(fx)

fx = Formula()
fx.OutputName = 'diameter'
fx.InputNames = ['circumference']
fx.Function = lambda dbList: dbList[0] / math.pi
rs.append(fx)

fx = Formula()
fx.OutputName = 'dilution_factor'
fx.InputNames = ['initial_volume', 'final_volume']
fx.Function = lambda dbList: dbList[1] / dbList[0]
rs.append(fx)

fx = Formula()
fx.OutputName = 'electric_current'
fx.InputNames = ['resistance', 'voltage']
fx.Function = lambda dbList: dbList[1] / dbList[0]
rs.append(fx)

fx = Formula()
fx.OutputName = 'resistance'
fx.InputNames = ['electric_current', 'voltage']
fx.Function = lambda dbList: dbList[1] / dbList[0]
rs.append(fx)

fx = Formula()
fx.OutputName = 'voltage'
fx.InputNames = ['electric_current', 'resistance']
fx.Function = lambda dbList: dbList[0] * dbList[1]
rs.append(fx)

fx = Formula()
fx.OutputName = 'gauge_pressure'
fx.InputNames = ['density', 'height']
fx.Function = lambda dbList: dbList[0] * dbList[1] * 9.8 / 1e5
rs.append(fx)

fx = Formula()
fx.OutputName = 'half-life'
fx.InputNames = ['mass0', 'mass1', 'time']
fx.Function = lambda dbList: dbList[2] / (math.log(dbList[1] / dbList[0], 0.5))
rs.append(fx)

fx = Formula()
fx.OutputName = 'melted_time'
fx.InputNames = ['heat_of_fusion', 'mole', 'power']
fx.Function = lambda dbList: dbList[0] * dbList[1] / dbList[2]
rs.append(fx)

fx = Formula()
fx.OutputName = 'molar_heat'
fx.InputNames = ['shc', 'molar_mass']
fx.Function = lambda dbList: dbList[0] * dbList[1]
rs.append(fx)

fx = Formula()
fx.OutputName = 'radius'
fx.InputNames = ['circumference']
fx.Function = lambda dbList: dbList[0] / (2 * math.pi)
rs.append(fx)

fx = Formula()
fx.OutputName = 'ph'
fx.InputNames = ['molecule', 'molarity']
fx.Function = Formula.CalcPHFromSimpleSolution
rs.append(fx)

